<?php

namespace App;



use Input;
use Image;
use File;
use DB;


class Pictures extends Base
{
    protected $table='pictures';
    protected $fillable=['title','note_id','sort','link','ext'];
    protected $appends = ['file','small_file'];


    public function getFileAttribute(){
        return  '/pictures/'.$this->attributes['id'].".".$this->attributes['ext'];
    }

    public function getSmallFileAttribute(){
        return  '/pictures/thumbs/'.$this->attributes['id'].".".$this->attributes['ext'];
    }


    /**
     * @param array $picture_conf
     * @return string
     */
    static public function loadPicture($picture_conf=array()){
        if(Input::file('file')&&Input::file('file')->isValid()) {
            $filtredData = Input::file('file');
            switch ($filtredData->getMimeType()) {
                case 'image/jpeg':
                    $ext = 'jpg';
                    break;
                case 'image/png':
                    $ext = 'png';
                    break;
                case 'image/gif':
                    $ext = 'gif';
                    break;
            }

        }elseif (isset($picture_conf['file'])&&!empty($picture_conf['file'])){
            $filtredData = File::get($picture_conf['file_path']);
            //dd($picture_conf['file_path']);
            $ext = File::extension($picture_conf['file_path']);
        }
        if(isset($ext)&&!empty($ext)) {
            $path = public_path() . '/pictures/';
            $thumb_path = public_path() . '/pictures/thumbs/';
            $link = isset($picture_conf['link']) ? $picture_conf['link'] : 'default';
            $node_id = isset($picture_conf['node_id']) ? $picture_conf['node_id'] : '0';
            $tmb_w = isset($picture_conf['th_w']) ? $picture_conf['th_w'] : 100;
            $tmb_h = isset($picture_conf['th_h']) ? $picture_conf['th_h'] : 100;

            $sort = DB::table('pictures')->where('link', '=', $link)->where('note_id', '=', $node_id)->count();
            $picData = new Self();
            $picData->sort = $sort + 1;
            $picData->link = $link;
            $picData->note_id = $node_id;
            $picData->ext = $ext;
            $picData->save();
            //File::put($path.$picData->id.".".$ext, $filtredData);
            $picture = Image::make($filtredData);
            //@unlink($path .  $picData->id."." . $ext);
            $picture->save($path . $picData->id . "." . $ext, 100);
            $picture->fit($tmb_w, $tmb_h);
            //@unlink($thumb_path . $picData->id."." . $ext);
            $picture->save($thumb_path . $picData->id . "." . $ext, 100);
            return $picData->toArray();
        }
    }

    public function delete()
    {

        File::delete([public_path().$this->file, public_path().$this->small_file]);
        return parent::delete(); // TODO: Change the autogenerated stub
    }

//    /**
//     * @param array $picture_conf
//     * @return string
//     */
//    static public function getPicture($picture_conf=array()){
//
//        $path = public_path() . '/pictures/';
//        $thumb_path = public_path() . '/pictures/thumbs/';
//        $link = isset($picture_conf['link']) ? $picture_conf['link'] : '';
//        $node_id = isset($picture_conf['node_id']) ? $picture_conf['node_id'] : '';
//
//        $photos = DB::table('picture')->where('link','=',$link)->where('note_id','=',$node_id)->orderBy('sort')->get();
//
//        return $photos;
//
//    }



}
