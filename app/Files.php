<?php

namespace App;

use \Storage;
use \Request;
use \DB;
use \File;
use \Response;

class Files extends Base
{
    protected $table='files';
    protected $fillable=['title','note_id','sort','link','ext'];
    protected $appends = ['file','url'];

    public function getFileAttribute(){
        return  $this->attributes['id'].".".$this->attributes['ext'];
    }

    public function getUrlAttribute(){
        return  '/download/'.$this->attributes['id'];
    }

    public function getUrl(){
        return Storage::disk()->getDriver()->getAdapter()->getPathPrefix().$this->file;
    }

    static public function loadFile($conf=array()){
        $file = Request::file('file');
            if(!$file->isValid()){App::about(400);}
            $link = isset($conf['link']) ? $conf['link'] : 'default';
            $node_id = isset($conf['node_id']) ? $conf['node_id'] : '0';
            $sort = DB::table('files')->where('link','=',$link)->where('note_id','=',$node_id)->count();

            $filename = $file->getClientOriginalName();
            $ext = $file->getClientOriginalExtension();


            $fileData = new Self();
            $fileData->title = $filename;
            $fileData->sort = $sort+1;
            $fileData->link = $link;
            $fileData->note_id = $node_id;
            $fileData->ext = $ext;
            $fileData->save();
            Storage::put($fileData->id.'.'.$ext, File::get($file));

            return $fileData->toArray();


    }

    public function download(){
        return response()->download($this->getUrl(),$this->title.".".$this->ext);
    }

    public function delete()
    {
        if(Storage::exists($this->file)){
            Storage::delete($this->file);
        }
        return parent::delete(); // TODO: Change the autogenerated stub
    }


}
