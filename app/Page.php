<?php

namespace App;
use Log;

class Page extends Base
{
    protected $table = 'pages';
    protected $fillable = ['url','link','title','content','seo_description','seo_keywords','seo_title','sort','seo_content','bottom','not_delete','page_id','small_content','top_menu'];

    public function getRouteKeyName()
    {
        return 'url';
    }

    public function pictures(){
        return $this->hasMany('App\Pictures','note_id')->where('link','=','page')->orderBy('sort');
    }
    public function gallery(){
        return $this->hasMany('App\Pictures','note_id')->where('link','=','gallery_page')->orderBy('sort');
    }
    public function ico(){
        return $this->hasMany('App\Pictures','note_id')->where('link','=','page_ico')->orderBy('sort');
    }
    public function type(){
        return $this->hasOne('App\PageType','id','type_id');
    }

    public function setLinkAttribute($value){
        $this->attributes['link'] = empty($value)?str_slug($this->title):$value;
        $this->updateUrl();
    }

    public function updateUrl(){
        $parent=$this->parent;
        $this->url = isset($parent->url)?$parent->url.'/'.$this->link:$this->link;
    }

    public function setUrlChilds(){
        foreach($this->childs as $child){
            $child->updateUrl();
            $child->save();
        }
    }

    public function url(){
        return '/'.$this->url;
    }

    public function parent(){
        return $this->hasOne('App\Page','id','page_id');
    }

    public function childs(){
        return $this->hasMany('App\Page')->orderBy('sort');
    }

    public function bread(){
        $bread = [['link'=>''.$this->url(), 'title'=>$this->title]];
        if($this->page_id!=0){
           /* if($this->parent->childs->first()->id==$this->id&&$this->parent->page_id==0){ // если это первый потомок корневого елемента то ссылка как у родителя
                $bread = $this->parent->bread();
            }else{*/
                $bread = array_merge($this->parent->bread(),$bread);
//            }
        }
        return $bread;
    }

//    public function save(){
//        $res = parent::save();
//        $this->setUrlChilds();
//        return $res;
//    }

    public static function boot()
    {
        parent::boot();

        static::saved(function($page)
        {
            $page->setUrlChilds();

        });

    }

    /**
     * @return bool|null
     * @throws \Exception
     */
    public function delete()
    {

       $this->pictures->delete();
       $this->gallery->delete();
       $this->ico->delete();
        return parent::delete(); // TODO: Change the autogenerated stub
    }
}
